version: '3.8'

services:
  # Zookeeper for Kafka coordination
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: money-transfer-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - money-transfer-network

  # Kafka for real-time rule updates
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: money-transfer-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "bash", "-c", "unset JMX_PORT; kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    networks:
      - money-transfer-network

  # Redis for rule storage and caching
  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: money-transfer-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ""
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - money-transfer-network

  # Money Transfer Rules Engine
  rules-engine:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    hostname: rules-engine
    container_name: money-transfer-rules-engine
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"  # REST API
      - "50051:50051"  # gRPC API
    environment:
      # Redis Configuration
      REDIS_URL: redis://redis:6379
      REDIS_MAX_CONNECTIONS: 10
      REDIS_RETRY_ON_TIMEOUT: "true"
      REDIS_HEALTH_CHECK_INTERVAL: 30
      
      # Kafka Configuration
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: rules
      
      # Service Configuration
      REST_PORT: 8000
      GRPC_PORT: 50051
      LOG_LEVEL: INFO
      
      # Python Configuration
      PYTHONPATH: /app
      PYTHONUNBUFFERED: 1
      
      # Performance tuning
      UVICORN_WORKERS: 2
      UVICORN_WORKER_CLASS: uvicorn.workers.UvicornWorker
    volumes:
      - rules_logs:/app/logs
      - ./config:/app/config:ro  # Optional config directory
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/health || exit 1"]
      interval: 30s
      retries: 3
    restart: unless-stopped
    networks:
      - money-transfer-network

  # Kafka UI for monitoring (optional)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: money-transfer-kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    restart: unless-stopped
    networks:
      - money-transfer-network
    profiles:
      - monitoring

  # Redis Insight for monitoring (optional)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: money-transfer-redis-insight
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    restart: unless-stopped
    networks:
      - money-transfer-network
    profiles:
      - monitoring

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: money-transfer-prometheus
    depends_on:
      - rules-engine
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - money-transfer-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: money-transfer-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - money-transfer-network
    profiles:
      - monitoring

# Named volumes for data persistence
volumes:
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  redis_insight_data:
    driver: local
  rules_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network for service communication
networks:
  money-transfer-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
